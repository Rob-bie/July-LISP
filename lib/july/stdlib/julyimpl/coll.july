; coll.july

(defun foldl
  ([coll fn] (foldl (tail coll) fn (head coll)))
  ([coll fn acc]
    (if (empty? coll)
      acc
      (foldl (tail coll) fn (fn (head coll) acc)))))

(defun map
  ([coll f] (map coll f (list)))
  ([coll f acc]
    (if (empty? coll)
      (rev acc)
      (map (tail coll) f (push (f (head coll)) acc)))))

(defun filter
  ([coll p] (filter coll p (list)))
  ([coll p acc]
    (if (empty? coll)
      (rev acc)
      (if (p (head coll))
        (filter (tail coll) p (push (head coll) acc))
        (filter (tail coll) p acc)))))

(defun filter-map
  ([coll p f] (filter-map coll p f (list)))
  ([coll p f acc]
    (if (empty? coll)
      (rev acc)
      (if (p (head coll))
        (filter-map (tail coll) p f (push (f (head coll)) acc))
        (filter-map (tail coll) p f acc)))))

(defun any?
  ([coll p]
    (if (p (head coll))
      #t
      (if (empty? coll)
        #f
        (any? (tail coll) p)))))

(defun all?
  ([coll p] 
    (if (p (head coll))
      (if (empty? (tail coll))
        #t
        (all? (tail coll) p))
      #f)))

(defun max-by
  ([coll f]
    (foldl coll (fun [e acc]
                  (if (> (f e) (f acc))
                    e
                    acc)))))

(defun min-by
  ([coll f]
    (foldl coll (fun [e acc]
                  (if (< (f e) (f acc))
                    e
                    acc)))))

(defun join
  ([coll] (join1 coll))
  ([coll delim] (join2 coll delim)))

(defun range
  ([bound-a bound-b] (range2 bound-a bound-b)))